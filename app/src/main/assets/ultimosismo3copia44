package sistemasfireg.igp.org.sismosperu;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.PopupMenu;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.StringTokenizer;

public class Ultimosismo3 extends FragmentActivity implements OnMapReadyCallback {
    SupportMapFragment sMapFragment;
    Button mk;
    TextView text_hora;
    TextView text_intensidad;
    TextView text_ubicacion;
    TextView text_profundidad;
    TextView txtmagnitud;
    TextView txtubicacion;
    TextView texto;
    TextView iconocompartir;
    RelativeLayout textoencabezado;
    public Context c;
    public String fechadato;
    public String horadato;

    public String ubicacion;
    public String epicentro;
    public String latitud;
    public String longitud;
    public Double lati;
    public Double longit;
    private static String urlString;
    int mWidthScreen;
    int mHeightScreen;
    String magni,ml,nh;
    int tamano;
    Button satelite,terreno;
    private static final String TAG = Ultimosismo3.class.getSimpleName();
    private DatabaseReference mFirebaseDatabase;

    private DatabaseReference mDatabase;


    String dato_intensidad;
    String dato_hora;
    String dato_fecha;
    String dato_profundidad;
    String dato_epicentro;
    String dato_ubicacion;
    String magnitud2;
    GoogleMap googleMap;
    Button datox;
    String orden;
    String Message;

    String temp2;
    String s;
    String b;

    String k;

    static final int READ_BLOCK_SIZE = 100;


    private static final String jsonurl= "http://arteypixel.com/envio_notificaciones/consultaposicion.php";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        onNewIntent(getIntent());
        //ver que tipo de conexxion se esta utilizando
        ConnectivityManager cmanager = (ConnectivityManager) getSystemService(this.CONNECTIVITY_SERVICE);
        NetworkInfo info = cmanager.getActiveNetworkInfo();
        if(info!= null && info.isConnected()){
            if(info.getType() == ConnectivityManager.TYPE_WIFI) {
                Toast.makeText(Ultimosismo3.this, "Conexión Establecida", Toast.LENGTH_LONG).show();
            }
            else if(info.getType() == ConnectivityManager.TYPE_MOBILE){
                Toast.makeText(Ultimosismo3.this, "Conexión Establecida", Toast.LENGTH_LONG).show();
            }
        }
        else{
            Toast.makeText(Ultimosismo3.this, "Su Equipo ha Bloquedo la Conexión", Toast.LENGTH_LONG).show();
        }

/*

        try {
            consulta("http://arteypixel.com/envio_notificaciones/consultaposicion.php");
        } catch (IOException e) {
            e.printStackTrace();
        }
*/

//verdato();

        verdato3();

            try {
                detecta_sismo();
            } catch (IOException e) {
                e.printStackTrace();
            }

        /*
        try {
            detecta_sismo();
        } catch (IOException e) {
            e.printStackTrace();
        }
        */

        //      ver5();

     //   try {
          //  ver6();
      //  } catch (IOException e) {
        //    e.printStackTrace();
        //}



        String file2 = "datos_ordences";







        sMapFragment = SupportMapFragment.newInstance();
        FragmentManager sFm = getSupportFragmentManager();
        sFm.beginTransaction().add(R.id.mapx, sMapFragment).commit();
        sMapFragment.getMapAsync(this);
        setContentView(R.layout.activity_ultimosismo3);

        Typeface fontAwesomeFont = Typeface.createFromAsset(getAssets(), "fontawesome-webfont.ttf");
        TextView ihoras = (TextView) findViewById(R.id.iconohora);
        TextView iubicaciones = (TextView) findViewById(R.id.iconoubicacion);
        ihoras.setTypeface(fontAwesomeFont);
        iubicaciones.setTypeface(fontAwesomeFont);
        satelite = (Button) findViewById(R.id.satelite);
        terreno = (Button) findViewById(R.id.terreno);
        datox = (Button) findViewById(R.id.localizacion);
        datox.setTypeface(fontAwesomeFont);
        text_hora = (TextView) findViewById(R.id.text_hora);
        text_intensidad = (TextView) findViewById(R.id.text_intensidad);
        text_ubicacion = (TextView) findViewById(R.id.text_ubicacion);
        text_profundidad = (TextView) findViewById(R.id.text_profundidad);
        txtmagnitud= (TextView) findViewById(R.id.grados);
        txtubicacion= (TextView) findViewById(R.id.txtubicacion);
        texto = (TextView) findViewById(R.id.texto);

        iconocompartir = (TextView) findViewById(R.id.iconocompartir);
        iconocompartir.setTypeface(fontAwesomeFont);
        iconocompartir.setBackgroundResource(R.drawable.circuloblanco);

        textoencabezado = (RelativeLayout) findViewById(R.id.textoencabezado);


        FrameLayout frame1 = (FrameLayout) findViewById(R.id.mapx);
        Display display = ((WindowManager) this.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        mWidthScreen = display.getWidth();
        mHeightScreen = display.getHeight();

        switch (getResources().getDisplayMetrics().densityDpi) {
            case DisplayMetrics.DENSITY_LOW:
                tamano = (mHeightScreen - 259);
                break;

            case DisplayMetrics.DENSITY_MEDIUM:
                tamano = (mHeightScreen - 345);
                break;

            case DisplayMetrics.DENSITY_TV:
                tamano = (mHeightScreen - 459);
                break;


            case DisplayMetrics.DENSITY_HIGH:
                tamano = (mHeightScreen - 518);
                break;

            case DisplayMetrics.DENSITY_XHIGH:
                tamano = (mHeightScreen - 690);
                break;


            case DisplayMetrics.DENSITY_XXHIGH:
                tamano = (mHeightScreen - 1035);
                break;

            case DisplayMetrics.DENSITY_XXXHIGH:
                tamano = (mHeightScreen - 1380);
                break;

        }

        frame1.getLayoutParams().height = tamano;
        frame1.requestLayout();
        mk= (Button) findViewById(R.id.button);
        mk.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                PopupMenu popup = new PopupMenu(Ultimosismo3.this, mk);
                popup.getMenuInflater().inflate(R.menu.menu_main, popup.getMenu());

                popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {

                    public boolean onMenuItemClick(MenuItem item) {

                        int id = item.getItemId();

                        if (id == R.id.ultimo_sismo) {
                            Intent intent = new Intent(Ultimosismo3.this,Ultimosismo3.class);
                            startActivity(intent);
                            return true;
                        }


                        if (id == R.id.listado_ultimos_sismos) {
                            Intent intent = new Intent(Ultimosismo3.this,Ultimosismoslist.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.mapa_sismos) {
                            Intent intent = new Intent(Ultimosismo3.this,Listadoenmapa.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.glosario) {
                            Intent intent = new Intent(Ultimosismo3.this,Glosarioestatico.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.notificarsino) {
                            Intent intent = new Intent(Ultimosismo3.this,Configuraciones.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.salir) {
                            Intent intent = new Intent(Intent.ACTION_MAIN);
                            intent.addCategory(Intent.CATEGORY_HOME);
                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(intent);
                            finish();
                        }
                        return Ultimosismo3.super.onOptionsItemSelected(item);
                    }
                });
                popup.show();
            }
        });
        mostrar_ult_sismo();
    }




    @Override
    public void onNewIntent(Intent intent){
        Bundle extras = intent.getExtras();
        if(extras != null){
            if(extras.containsKey("NotificationMessage"))
            {
                String latitudk = extras.getString("NotificationMessage");
                Toast.makeText(Ultimosismo3.this,"k : "+latitudk, Toast.LENGTH_LONG).show();
            }
            else{
                Toast.makeText(Ultimosismo3.this,"no hay datos ", Toast.LENGTH_LONG).show();

            }
        }


    }



    private void ver6() throws IOException {

        String file2 = "datos_ordences";

     //   try {
            FileInputStream fileIn = openFileInput(file2);
            InputStreamReader InputRead = new InputStreamReader(fileIn);
            char[] inputBuffer = new char[READ_BLOCK_SIZE];
            //  String k = "";
            int charRead;
            charRead = InputRead.read(inputBuffer);
          //  while ((charRead = InputRead.read(inputBuffer)) > 1) {
                // char to string conversion
                String readstring = String.copyValueOf(inputBuffer, 0, charRead);
                k += readstring;
           // }
            InputRead.close();
            //  Toast.makeText(getBaseContext(),k,Toast.LENGTH_SHORT).show();
            Log.d(TAG, "mi daton: " + k);
            //  conexion(b);

            StringTokenizer st = new StringTokenizer(k.toString(), ",");
            String ajustes = st.nextToken();
            String  tipo = st.nextToken();

          //   detecta_sismo(tipo);

       // } catch (Exception e) {
         //   e.printStackTrace();
       // }
    }


    private void ver5() {
        String file2 = "datos_ordences";


        try {
            FileInputStream fileIn = openFileInput(file2);
            InputStreamReader InputRead = new InputStreamReader(fileIn);

            char[] inputBuffer = new char[READ_BLOCK_SIZE];
            String b = "";
            int charRead;

            while ((charRead = InputRead.read(inputBuffer)) > 0) {
                // char to string conversion
                String readstring = String.copyValueOf(inputBuffer, 0, charRead);
                b += readstring;

            }
            InputRead.close();

            Toast.makeText(getBaseContext(),b,Toast.LENGTH_SHORT).show();
            Log.d(TAG, "mi daton: " + b);
            //  conexion(b);
        //    detecta_sismo(b);

        } catch (Exception e) {
            e.printStackTrace();
        }
        // detecta_sismo();
    }


    public void consulta(String urlString) throws IOException {
        AsyncTask.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    URL url = new URL("http://arteypixel.com/envio_notificaciones/consultaposicion.php");
                    HttpURLConnection urlConnection = null;
                    BufferedReader bufferedReader = null;
                    urlConnection = (HttpURLConnection) url.openConnection();
                    // InputStream in = new BufferedInputStream(urlConnection.getInputStream());
                    bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                    String json = bufferedReader.readLine();
                    //  Toast.makeText(getApplicationContext(), json, Toast.LENGTH_SHORT).show();
                    Log.d(TAG, "get json: " + json);
                 //   ver2(json);
                    urlConnection.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }


    private void ver2(String dato) {
        String Message5 = dato;
        String file_namex = "datos_ordences";
        try {
            FileOutputStream fileOutputStream = openFileOutput(file_namex, MODE_PRIVATE);
            fileOutputStream.write(Message5.getBytes());
            // fileOutputStream.write(Message4.getBytes());
            fileOutputStream.close();
            //  Toast.makeText(getApplicationContext(), "Configurado", Toast.LENGTH_LONG).show();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public void verdato() {

        /*
        FileInputStream fileInputStream = null;
        try {
            fileInputStream = openFileInput("datos_orden");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        StringBuffer stringBuffer = new StringBuffer();

        //orden = stringBuffer.toString();


        try {
            while ((Message = bufferedReader.readLine()) != null) {
                stringBuffer.append(Message);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        orden = stringBuffer.toString();


        Toast.makeText(getApplicationContext(), orden, Toast.LENGTH_LONG).show();
        */

        ///




        /*
         String file2 = "datos_ordences";

        try {
            FileInputStream fin2 = openFileInput(file2);
            int c;
          ///  String temp="";
            while( (c = fin2.read()) != -1){
                temp2 = temp2 + Character.toString((char)c);
            }
           // tv.setText(temp);
            Toast.makeText(getApplicationContext(),"dato : " + temp2,Toast.LENGTH_SHORT).show();
        }
        catch(Exception e){
        }
*/

        String file2 = "datos_ordences";



        try {
            FileInputStream fileIn = openFileInput(file2);
            InputStreamReader InputRead= new InputStreamReader(fileIn);

            char[] inputBuffer= new char[READ_BLOCK_SIZE];
            String b="";
            int charRead;

            while ((charRead=InputRead.read(inputBuffer))>0) {
                // char to string conversion
                String readstring=String.copyValueOf(inputBuffer,0,charRead);
                b +=readstring;
            }
            InputRead.close();
            Toast.makeText(getBaseContext(), b,Toast.LENGTH_SHORT).show();

        } catch (Exception e) {
            e.printStackTrace();
        }


/*
        try {

            String FILENAME = "datos_ordences";
            String FOLDERNAME = "sub";
            String string = "hello world!";

            Context context = getApplicationContext();
            String folder = context.getFilesDir().getAbsolutePath() + File.separator + FOLDERNAME;

            File subFolder = new File(folder);

            if (!subFolder.exists()) {
                subFolder.mkdirs();
            }

            FileOutputStream outputStream = new FileOutputStream(new File(subFolder, FILENAME));

            outputStream.write(string.getBytes());
            outputStream.close();

        } catch (FileNotFoundException e) {
            Log.e("ERROR", e.toString());
        } catch (IOException e) {
            Log.e("ERROR", e.toString());
        }
*/


/*
        try {
            FileInputStream fileInputStream =  openFileInput("datos_orden");
            InputStreamReader inputStreamReader =  new InputStreamReader(fileInputStream);
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
            StringBuffer stringBuffer =  new StringBuffer();
            try {
                while ((Message = bufferedReader.readLine())!=null)
                {
                    stringBuffer.append(Message);
                }
                orden = stringBuffer.toString();
                Log.d(TAG, "el valor es: " + orden);


               // StringTokenizer st = new StringTokenizer(stringBuffer.toString(), ",");
              //  ajustes = st.nextToken();
               // tipo = st.nextToken();
              //  r = ajustes.length();
              //  s = tipo.length();
             //   if (r == 1){
              //      showNotification(remoteMessage.getData().get("message"));
             //   }
              //  else {
                //    String bb = "";
              //  }


            }

            catch (IOException e) {
                e.printStackTrace();
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        Toast.makeText(getApplicationContext(), orden, Toast.LENGTH_LONG).show();
*/


    }








    public void verdato3() {
        String file = "datos_configuracion";

        try {
            FileInputStream fin = openFileInput(file);
            int c;
            String temp="";
            while( (c = fin.read()) != -1){
                temp = temp + Character.toString((char)c);
            }
            // tv.setText(temp);
            Toast.makeText(getBaseContext(),temp,Toast.LENGTH_SHORT).show();
        }
        catch(Exception e){
        }
    }





    public void consulta2(String urlString ) {

        class GetJSON extends AsyncTask<String, Void, String> {
            protected String doInBackground(String... parans) {
                String uri = parans[0];
                BufferedReader bufferedReader = null;
                try {
                    URL url = new URL(uri);
                    HttpURLConnection con = (HttpURLConnection) url.openConnection();
                    StringBuilder sb = new StringBuilder();
                    bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));

                    // String json;
                    String json;


                    while((json = bufferedReader.readLine())!=null){
                        sb.append(json + "\n");
                       // Toast.makeText(getApplicationContext(), sb.append(json + "\n"), Toast.LENGTH_SHORT).show();
                      //  Log.e("log_tag", "Error in http connection");

                    }

                     return sb.toString().trim();
                }
                catch (IOException e) {
                    Log.e("log_tag", "Error in http connection" + e.toString());

                   return null;
                }

                // }
            }


        }

        GetJSON gj = new GetJSON();
        gj.execute(urlString);

    }

     public void detecta_sismo() throws IOException {


  //  public void detecta_sismo() throws IOException {

        String file2 = "datos_ordences";

        //   try {
        FileInputStream fileIn = openFileInput(file2);
        InputStreamReader InputRead = new InputStreamReader(fileIn);
        char[] inputBuffer = new char[READ_BLOCK_SIZE];
        //  String k = "";
        int charRead;
        charRead = InputRead.read(inputBuffer);
        //  while ((charRead = InputRead.read(inputBuffer)) > 1) {
        // char to string conversion
        String readstring = String.copyValueOf(inputBuffer, 0, charRead);
        k += readstring;
        // }
        InputRead.close();
        //  Toast.makeText(getBaseContext(),k,Toast.LENGTH_SHORT).show();
        Log.d(TAG, "mi daton: " + k);
        //  conexion(b);

        StringTokenizer st = new StringTokenizer(k.toString(), ",");
        String ajustes = st.nextToken();
        String  tipo = st.nextToken();



   //     FirebaseApp secondApp = FirebaseApp.getInstance("https://igpsismos2-22.firebaseio.com");

       // FirebaseDatabase firstDatabase = FirebaseDatabase.getInstance();  //default db from JSON
    //    DatabaseReference secondDatabase = FirebaseDatabase.getInstance(secondApp).getReference("messages");

 // ...

// Get a secondary database instance by URL
        //  DatabaseReference mDatabase;
// ...
     //   mDatabase = FirebaseDatabase.getInstance(FirebaseApp.getInstance("https://igpsismos2-22.firebaseio.com")).getReference("messages");


     /*

        DatabaseReference mFirebaseDatabase;

        mFirebaseDatabase = FirebaseDatabase.getInstance(FirebaseApp.getInstance("https://testapp-1234.firebaseio.com")).getReference("messages");






        FirebaseOptions options = new FirebaseOptions.Builder()
                .setApplicationId("YourApplicationId")
                .setApiKey("yourApiKey")
                .setDatabaseUrl("https://your-second-database.firebaseio.com/")
                .build();
        FirebaseApp.initializeApp(this.getApplicationContext(), options, "second_database_name");
        FirebaseApp secondApp = FirebaseApp.getInstance("second_database_name");
*/
/*
        FirebaseApp app = FirebaseApp.getInstance("https://igpsismos2.firebaseio.com/");
        FirebaseDatabase secondaryDatabase = FirebaseDatabase.getInstance(app);
        DatabaseReference mDbRef = secondaryDatabase.getReference("messages");

*/

       // ko = stringBuffer.toString();

      //  StringTokenizer st = new StringTokenizer(k.toString(), ",");
     //  String ajustes = st.nextToken();
   //   String  tipo = st.nextToken();

    //    String  ahi = st.nextToken();



     // Toast.makeText(getBaseContext(), tipo,Toast.LENGTH_SHORT).show();


        DatabaseReference mDatabase;
        mDatabase = FirebaseDatabase.getInstance().getReference();

       // mDatabase = FirebaseDatabase.getInstance('"'+temp2+'"').getReference("messages");


         if (tipo.length() < 2){

             mDatabase = FirebaseDatabase.getInstance("https://igpsismos2-22.firebaseio.com/").getReference("messages");
             Toast.makeText(getBaseContext(), "red normal",Toast.LENGTH_SHORT).show();
         }
         else{

             mDatabase = FirebaseDatabase.getInstance(tipo).getReference("messages");
             Toast.makeText(getBaseContext(), "rbase",Toast.LENGTH_SHORT).show();

         }


    //  mDatabase = FirebaseDatabase.getInstance(urlc).getReference("messages");

        //  mDatabase = FirebaseDatabase.getInstance(s).getReference("messages");

        mDatabase.keepSynced(true);
        mDatabase.orderByKey().limitToLast(1).addChildEventListener(new ChildEventListener() {

            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    public void guardar_pref(DatSismo sreporte) {
        SharedPreferences prefs = getSharedPreferences("ultsismo", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString("incategoria", sreporte.getCategoria());
        editor.putString("inreferencia", sreporte.getReferencia());
        editor.putString("inmagnitud", sreporte.getMagnitud());
        editor.putString("inprof", sreporte.getProfundidad());
        editor.putString("infecha", sreporte.getFechautc());
        editor.putString("txintenso", sreporte.getIntenso());
        editor.putString("inhora", sreporte.getHorautc());
        editor.putString("inlat", sreporte.getLat());
        editor.putString("inlong", sreporte.getLon());
        editor.putString("inepic", sreporte.getEpicentro());
        editor.putString("insim", sreporte.getSimulacro());
        editor.apply();
        mostrar_ult_sismo();

    }




    public void mostrar_ult_sismo() {
        SharedPreferences prefs = getSharedPreferences("ultsismo", Context.MODE_PRIVATE);
        String intensidad = prefs.getString("txintenso", "");
        String hora = prefs.getString("inhora", "");
        String fecha = prefs.getString("infecha", "");
        String simulacro  = prefs.getString("insim", "");
        String profundidad = prefs.getString("inprof","");

        fechadato= prefs.getString("infecha","0");
        horadato = prefs.getString("inhora","0");

        latitud = prefs.getString("inlat","0");
        longitud = prefs.getString("inlong","0");
        epicentro = prefs.getString("inepic","");
        magni = prefs.getString("inmagnitud","");
        ubicacion = prefs.getString("inreferencia","Aqui");


        iconocompartir.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
                sharingIntent.setType("text/plain");
                String shareBody = "Reporte de Último Sismo Perú" +  "\n";
                String shareSub = "Reporte de Último Sismo Perú" +  "\n" + "Fecha Local: " + fechadato + "  " + horadato +  "\n Magnitud: " + magni + "\n" +  "Latitud: " + latitud + " " + "Longitud: " + longitud + "\n" + "Referencia: " + ubicacion + "\n"  +   "\n"  ;
                //String shareSub2 = "http://ultimosismo.igp.gob.pe/";

                sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, shareBody);
                sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareSub);
               // sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareSub2);

                startActivity(Intent.createChooser(sharingIntent, "compartir último sismo"));
            }
        });



        //evaluar dato intensidad
        if (intensidad.length() == 0){
            dato_intensidad = "- -";
        }
        else{
            dato_intensidad = intensidad;
        }
        text_intensidad.setText(dato_intensidad);


        //evaluar dato epicentro
        if (epicentro.length() == 0){
            dato_epicentro = "- -";
        }
        else{
            dato_epicentro = epicentro;
        }

        //evaluar dato hora
        if (hora.length() == 0){
            dato_hora = "- -";
        }
        else{
            dato_hora = hora;
        }

        //evaluar dato fecha
        if (fecha.length() == 0){
            dato_fecha = "- -";
        }
        else{
            dato_fecha = fecha;
        }
        text_hora.setText(dato_fecha+"   "+dato_hora);


        //evaluar dato profundidad
        if (profundidad.length() == 0){
            dato_profundidad= "- -";
        }
        else{
            dato_profundidad = profundidad;
        }
        text_profundidad.setText(dato_profundidad+""+" km");


        //evaluar dato magnitud
        double w;

        try {
            w = new Double(magni);
        } catch (NumberFormatException e) {
            w = 0;
        }

        if (w == 0){
            magnitud2 = "0";
        }
        else
        {
            magnitud2 = magni;
        }


        Double val = Double.parseDouble(magnitud2);

        txtmagnitud.setText(magnitud2);


        if (val >= 0 && val < 4.5){
            txtmagnitud.setBackgroundResource(R.drawable.circuloverde);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.verdeigp));

        }

        else if (val >= 4.5 && val <= 6.0){
            txtmagnitud.setBackgroundResource(R.drawable.circuloamarillo);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.orangeyellow));

        }


        else if (val > 6.0 && val <= 15){
            txtmagnitud.setBackgroundResource(R.drawable.circulorojo);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.rojoigp));

        }

        else  {
            txtmagnitud.setBackgroundResource(R.drawable.circulorojo);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.rojoigp));

        }









        //evaluar dato ubicacion
        if (ubicacion.length() == 0){
            dato_ubicacion = "null";
        }
        else{
            dato_ubicacion = ubicacion;
        }

        String z = dato_ubicacion.replace("-","\n");
        txtubicacion.setText(z);


        //evaluar dato simulacro
        int g;

        try {
            g = new Integer(simulacro);
        } catch (NumberFormatException e) {
            g = 0;
        }



        if (g == 0){
            texto.setText("Último Sismo");
        }
        else if (g == 1){
            texto.setText("Simulacro");
        }
        else if (g == 2){
            texto.setText("Simulación");
        }
        else{
            texto.setText("Último Sismo");
        }

/*
        if (g > 0){
            texto.setText("Simulacro");
        }
        else if (g < 1){
            texto.setText("Último sismo");
        }
        else{
            texto.setText("Último sismo");
        }

      */


        lati= Double.parseDouble(latitud);
        longit = Double.parseDouble(longitud);
        sMapFragment.getMapAsync(this);
        DecimalFormat form = new DecimalFormat("0.00");
        text_ubicacion.setText(form.format(lati)+"  "+" "+form.format(longit));
    }

    public void onMapReady(final GoogleMap googleMap) {
        BitmapDescriptor icon = BitmapDescriptorFactory.fromResource(R.drawable.iconored);
        LatLng latLng = new LatLng(lati,longit);
        if (latLng != null){
            googleMap.clear();
        }
        googleMap.addMarker(new MarkerOptions().position(latLng).title("Epicentro").icon(icon).anchor(0.5f, 0.5f)).showInfoWindow();
        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 6));
        googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
        googleMap.animateCamera(CameraUpdateFactory.zoomTo(6), 1500, null);
        googleMap.getUiSettings().setZoomControlsEnabled(true);
        googleMap.getUiSettings().setIndoorLevelPickerEnabled(true);
        googleMap.getUiSettings().setTiltGesturesEnabled(true);
        googleMap.getUiSettings().setCompassEnabled(true);

        satelite.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
            }
        });

        terreno.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                googleMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
            }
        });


        datox.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                // map.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lati, longit), 6));
            }
        });


    }
}